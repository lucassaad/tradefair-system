[project]
name = "fast-zero"
version = "0.1.0"
description = ""
authors = [
    {name = "Lucas Saad",email = "lucassaadro@gmail.com"}
]
readme = "README.md"
requires-python = ">=3.13,<4.0"
dependencies = [
    "fastapi[standard] (>=0.117.1,<0.118.0)"
]


[build-system]
requires = ["poetry-core>=2.0.0,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[dependency-groups]
dev = [
    "pytest (>=8.4.2,<9.0.0)",
    "pytest-cov (>=7.0.0,<8.0.0)",
    "taskipy (>=1.14.1,<2.0.0)",
    "ruff (>=0.13.2,<0.14.0)"
]

[tool.ruff]
line-length = 79
extend-exclude = ['migrations']

[tool.ruff.lint]
preview = true
select = ['I', 'F', 'E', 'W', 'PL', 'PT']

[tool.ruff.format]
preview = true
quote-style = 'single'

[tool.pytest.ini_options]
pythonpath = "."
addopts = '-p no:warnings'

[tool.taskipy.tasks]
lint = 'ruff check' # checagem de boas práticas
pre_format = 'ruff check --fix' # faz algumas correções de boas práticas
format = 'ruff format' # executa a formatação do código em relação às convenções de estilo de código 
run = 'fast api dev fast_zero/app.py' # executa o servidor de desenvolvimento do FastAPI
pre_test = 'task lint' # executa a camada de lint antes de executar os testes
test = 'pytest -s -x --cov=fast_zero -vv' # executa os testes com pytest de forma verbosa(vv) e adiciona nosso código como base de cobertura
post_test = 'coverage html' # gera um report de cobertura após os testes 
